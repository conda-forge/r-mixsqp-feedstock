{% set version = "0.3-54" %}
{% set posix = 'm2-' if win else '' %}

package:
  name: r-mixsqp
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/mixsqp_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/mixsqp/mixsqp_{{ version }}.tar.gz
  sha256: f7d0de918a221c58b3618dc3290a0ebe052256999ee3be35a19384f26b1dfb8e

build:
  number: 3
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}          # [not win]
    - {{ stdlib("c") }}            # [not win]
    - {{ compiler('cxx') }}        # [not win]
    - {{ compiler('m2w64_c') }}    # [win]
    - {{ stdlib("m2w64_c") }}      # [win]
    - {{ compiler('m2w64_cxx') }}  # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]
    - cross-r-base {{ r_base }}    # [build_platform != target_platform]
    - r-irlba                      # [build_platform != target_platform]
    - r-rcpp >=0.12.15             # [build_platform != target_platform]
    - r-rcpparmadillo              # [build_platform != target_platform]
    - libblas                      # [build_platform != target_platform]
    - liblapack                    # [build_platform != target_platform]
  host:
    - r-base
    - r-irlba
    - r-rcpp >=0.12.15
    - r-rcpparmadillo
    - libblas
    - liblapack
  run:
    - r-base
    - r-irlba
    - r-rcpp >=0.12.15
    - r-rcpparmadillo

test:
  commands:
    - $R -e "library('mixsqp')"           # [not win]
    - "\"%R%\" -e \"library('mixsqp')\""  # [win]

about:
  home: https://github.com/stephenslab/mixsqp
  license: MIT
  license_file:
    - {{ environ["PREFIX"] }}/lib/R/share/licenses/MIT
    - LICENSE
  summary: Provides optimization algorithms based on sequential quadratic programming (SQP) for maximum likelihood estimation of the mixture proportions in a finite mixture model where the component densities are known. The algorithms are expected to obtain solutions that are at least as accurate as the state-of-the-art
    MOSEK interior-point solver (called by function "KWDual" in the 'REBayes' package), and they are expected to arrive at solutions more quickly in large data sets. The algorithms are described in Y. Kim, P. Carbonetto, M. Stephens & M. Anitescu (2012) <arXiv:1806.01412>.

extra:
  recipe-maintainers:
    - conda-forge/r
